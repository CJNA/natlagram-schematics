"""an abstract class that allows for multiple models"""

from abc import ABC

class AbstractModel(ABC):

    def extract_code_from_response(self, response: str) -> str:
        """extract the kroki code generated by ChatGPT
        
        args:
            response: the response from ChatGPT

        returns:
            the kroki code
        """
        # find CODE_BLOCK_START token and CODE_BLOCK_STOP token
        if "CODE_BLOCK_START" not in response and "CODE_BLOCK_STOP" not in response:
            message = "Response does not contain a code block."
            message += "Response:\n" + response
            raise ValueError(message)
        code = response.split("CODE_BLOCK_START")[1].split("CODE_BLOCK_STOP")[0]
        return code

    def extract_diagram_api_from_response(self, response: str) -> str:
        """extract the diagram API (protocol, service) from the response, for example mermaid or blockdiag
        
        args:
            response: the response from ChatGPT

        returns:
            the diagram API
        """
        # find DIAGRAM_API=<kroki-protocoll> token
        if "DIAGRAM_API=" not in response:
            message = "Response does not contain a diagram type."
            message += "Response:\n" + response
            raise ValueError(message)

        # extract the diagram type from
        # DIAGRAM_API=<kroki-protocol>
        # or
        # DIAGRAM_API=<kroki-protocol> DIAGRAM_TYPE=<diagram-type>

        # take line with DIAGRAM_API
        rest_of_line = response.split("DIAGRAM_API=")[1]
        rest_of_line = rest_of_line.split("\n")[0] # remove newlines
        diagram_api = rest_of_line.split(" ")[0].rstrip() # remove DIAGRAM_TYPE if it exists
        return diagram_api